/*  Names: Reagan Wilcox, Julia Meissner, Galilea Olvera
    Section: 4
    Date: 3/??/2019
    File name: LAB 3-1
    Description:
		This program demonstrates ###################
		
	good to know: 
	65535 counts takes 35.56ms
	5.425E-7 s/count
	20 ms = 36864 counts => preload = 65535 - 36864 = 28672 counts
*/

//-----------------------------------------------------------------------------
// Compiler Directives
//-----------------------------------------------------------------------------
#include <c8051_SDCC.h> //include files. This file is available online
#include <stdio.h>      //
#include <stdlib.h>     //
#include <i2c.h>        //

//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);			// Initialize ports for input and output
void PCA_Init(void);			// Initialize PCA
void XBR0_Init(void);			// Initialize XBR0s
void PCA_ISR(void) __interrupt 9;	// Initialize Timer Interrupt Service 
unsigned char char(unsigned char n);	//

void Drive_Motor(void);			//
void Steering_Servo(void); 		//

//add more !!!


//###### Add all of our functions ########
//-----------------------------------------------------------------------------
// Global Variables
//-----------------------------------------------------------------------------
__sbit __at 0x87 LED;   	//15; P0.7
unsigned int counts;

//Part 1 Globals
unsigned int MOTOR_PW = 0;
unsigned int PW_MIN = 2028; 	//1.1ms
unsinged int PW_MAX = 3502;	//1.9ms
unsigned int PW_NEUT = 2764;	//1.5ms

//Part 2 Globals
unsigned int SERVO_PW = 0;
unsigned int PW_CENTER = _____;
unsigned int PW_RIGHT = _____;
unsigned int PW_LEFT = _____;

//Part 3 Globals
 
//-----------------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------------
void main(void)
{
	//declare local variables
    
	//initialize board
	Sys_Init();         // System Initialization
	Port_Init();        // Initialize Ports
	PCA_Init();         // Initialize PCA
	PCA_ISR() __interrupt 9;
	XBR0_Init();
	putchar(' ');       // the quote fonts may not copy correctly into SiLabs IDE
    
	/***********************/
	//part 1
	/***********************/
	printf("Embedded Control Drive Motor Control\r\n"); //beginnging mesaage
  	MOTOR_PW = PW_NEUT; //set motor to neutral
  	while (counts < 50); //wait one second SHOULD MAKE WHINING NOISE HERE
  
  	/*JUST IN CASE: START*/
  	printf("Did the car make a whining noise? if yes, hit y");
  	char cont;
  	cont = getchar();
  	while (cont != 'y'); // waits until user confirms motor startup
  	/*JUST IN CASE: END */
  	
  	while(1)
  	{
  		Drive_Motor();
  	}
	
	/***********************/
	//part 2
	/***********************/
	
	/***********************/
	//part 3
	/***********************/
	
}

//-----------------------------------------------------------------------------
// SubFunctions
//-----------------------------------------------------------------------------
/***********************/
void Port_Init(void)
{
	//############################## fix once we have our pin-out right
	P1MDIN &= 0x ;		//Set analog 
	P1MDOUT &= 0x ;		//Set analog pin 1.1 to 0
	P1 |= 0x ;		//Set impedance of analog pin 1.1 to 1
    
	P2MDOUT &= 0xC0;	//Set Port 2 bits 0-6 to input (1100 0000)
	P2 |= ~0xC0;		//High impedance mode

	P3MDOUT |= 0x3F;	//Set Port 3 bits 0-5 to output (0011 1111)
}

/***********************/
//MOVED TO PCA_INIT 
//void Interrupt_Init(void) //Do not touch
//{
//	EIE1 |= 0x08;		// enable PCA Interrupt request (by masking)/
//	EA = 1;			// enable global interrupts (by sbit)
//}

/***********************/
void XBR0_Init(void) //do not touch
{
	XBR0 = 0x27; 		//configure XBR0 as instructed in lab3
}
 
/***********************/
void PCA_ISR(void) __interrupt 9 //do not touch
{
	if(CF)
	{
		CF = 0;			//clear overflow flab
		counts++;		//increment global counts variable
		PCAO = 28672;		// preload for 20 ms
	}
	PCA0CN &= 0x40;	//handle other interrupts

}
 
/***********************/
void PCA_Init(void) //do not touch
{
	PCA0CPM0 = PCA0CPM2 = PCA0CPM3 = 0xC2; //mode 0, 2, 3 in 16-bit compare mode
   
	PCA0CN = 0x40; //  Enable PCA counter
    
	PCA0MD = 0x81; //CF enabled, use SYSCLK/12
	
	EIE1 |= 0x08;		// enable PCA Interrupt request (by masking)
	EA = 1;			// enable global interrupts (by sbit)
}

/***********************/
unsigned char read_AD_input(unsigned char n) // Do not touch
{
	AMX1SL = n; /* Set P1.n as the analog input for ADC1 */
	ADC1CN = ADC1CN & ~0x20; /* Clear the “Conversion Completed” flag */
	ADC1CN = ADC1CN | 0x10; /* Initiate A/D conversion */
	while ((ADC1CN & 0x20) == 0x00); /* Wait for conversion to complete */
	return ADC1; /* Return digital value in ADC1 register */
}

/***********************/
//part1 functions
/***********************/
void Drive_Motor(void)
{
	char input;
	//wait for a key to be pressed
	input = getchar();
	if(input == 'f') //if 'f' is pressed by the user
	{
		if(MOTOR_PW < PW_MAX)
		{
			MOTOR_PW = MOTOR_PW + 10; //increase the steering pulsewidth by 10
		}
	}
	else if(input == 's') //if 's' is pressed by the user
	{
		if(MOTOR_PW > PW_MIN)
		{
			MOTOR_PW = MOTOR_PW - 10; //decrease the steering pulsewidth by 10
		}
	}
	PCA0CPL2 = 0xFFFF - MOTOR_PW;
	PCA0CPH2 = (0xFFFF - MOTOR_PW) >> 8;
}

/***********************/
//part2 functions
/***********************/
void Steering_Servo(void)
{}

/***********************/
//part3 functions
/***********************/
